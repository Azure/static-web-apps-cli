From 24edd347438c927ae9e694df5f2c7ab239e7961f Mon Sep 17 00:00:00 2001
From: Wassim Chegham <1699357+manekinekko@users.noreply.github.com>
Date: Sat, 31 Oct 2020 11:35:56 +0000
Subject: [PATCH 1/1] chore: refactor TS migration

---
 .gitignore                                    |  5 +-
 package.json                                  |  6 +-
 src/auth/app_auth_login_provider/index.ts     |  2 +-
 src/auth/app_auth_logout_complete/index.ts    |  2 +-
 src/auth/app_auth_me/index.ts                 |  2 +-
 .../index.ts                                  |  4 +-
 src/auth/identity_auth_logout/index.ts        |  2 +-
 .../identity_auth_logout_complete/index.ts    |  2 +-
 src/auth/identity_redirect_logout/index.ts    |  2 +-
 bin/index.ts => src/cli.ts                    | 10 +--
 src/utils.test.ts                             |  2 +-
 tsconfig.json                                 | 81 +++++--------------
 12 files changed, 40 insertions(+), 80 deletions(-)
 rename bin/index.ts => src/cli.ts (95%)

diff --git a/.gitignore b/.gitignore
index 06b1317..22e8db7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -42,7 +42,4 @@ __pycache__/
 *.py[cod]
 *$py.class
 
-bin/*.js
-bin/*.map
-src/**/*.js
-src/**/*.map
+dist
\ No newline at end of file
diff --git a/package.json b/package.json
index ae275f4..d251e93 100644
--- a/package.json
+++ b/package.json
@@ -6,11 +6,11 @@
     "release": "release-it --preRelease=alpha",
     "test": "jest",
     "build": "tsc",
-    "clean": "rm bin/*.js && rm src/*.js"
+    "prebuild": "rm -fr dist"
   },
   "bin": {
-    "swa": "./bin/index.js",
-    "swa-emu": "./bin/index.js"
+    "swa": "./dist/cli.js",
+    "swa-emu": "./dist/cli.js"
   },
   "author": "Wassim Chegham <github@wassim.dev>",
   "dependencies": {
diff --git a/src/auth/app_auth_login_provider/index.ts b/src/auth/app_auth_login_provider/index.ts
index cb8b68e..0d6df2b 100644
--- a/src/auth/app_auth_login_provider/index.ts
+++ b/src/auth/app_auth_login_provider/index.ts
@@ -2,7 +2,7 @@ import { AzureFunction, HttpRequest } from "@azure/functions";
 import { response } from "../../utils";
 const SWA_EMU_AUTH_URI = process.env.SWA_EMU_AUTH_URI || `http://localhost:4242`;
 
-const httpTrigger: AzureFunction = function (context, req: HttpRequest) {
+const httpTrigger: AzureFunction = function (context, _req: HttpRequest) {
   const { provider } = context.bindingData;
 
   const location = `${SWA_EMU_AUTH_URI}/.redirect/${provider}?hostName=localhost&staticWebAppsAuthNonce=${context.invocationId}`;
diff --git a/src/auth/app_auth_logout_complete/index.ts b/src/auth/app_auth_logout_complete/index.ts
index 16afec2..eda54e1 100644
--- a/src/auth/app_auth_logout_complete/index.ts
+++ b/src/auth/app_auth_logout_complete/index.ts
@@ -2,7 +2,7 @@ import { AzureFunction, HttpRequest } from "@azure/functions";
 import { response } from "../../utils";
 const SWA_EMU_HOST = "http://localhost:" + process.env.SWA_EMU_PORT;
 
-const httpTrigger: AzureFunction = function (context, req: HttpRequest) {
+const httpTrigger: AzureFunction = function (context, _req: HttpRequest) {
   context.res = response({
     context,
     status: 302,
diff --git a/src/auth/app_auth_me/index.ts b/src/auth/app_auth_me/index.ts
index 0216aab..be28887 100644
--- a/src/auth/app_auth_me/index.ts
+++ b/src/auth/app_auth_me/index.ts
@@ -1,5 +1,5 @@
 import { AzureFunction, HttpRequest } from "@azure/functions";
-import { response, validateCookie, getProviderFromCookie } from "../../utils";
+import { response, validateCookie } from "../../utils";
 import { currentUser } from "../../userManager";
 
 const httpTrigger: AzureFunction = function (context, req: HttpRequest) {
diff --git a/src/auth/identity_auth_login_provider_callback/index.ts b/src/auth/identity_auth_login_provider_callback/index.ts
index 0dd47ef..b2ec50d 100644
--- a/src/auth/identity_auth_login_provider_callback/index.ts
+++ b/src/auth/identity_auth_login_provider_callback/index.ts
@@ -2,8 +2,8 @@ import { AzureFunction, HttpRequest } from "@azure/functions";
 import { response } from "../../utils";
 const SWA_EMU_AUTH_URI = process.env.SWA_EMU_AUTH_URI || `http://localhost:4242`;
 
-const httpTrigger: AzureFunction = function (context, req: HttpRequest) {
-  let { state, code, nonce } = req.query;
+const httpTrigger: AzureFunction = function (context, _req: HttpRequest) {
+  // let { state, code, nonce } = req.query;
 
   const location = `${SWA_EMU_AUTH_URI}/.auth/login/done`;
   context.res = response({
diff --git a/src/auth/identity_auth_logout/index.ts b/src/auth/identity_auth_logout/index.ts
index 3e05a68..a0e86ff 100644
--- a/src/auth/identity_auth_logout/index.ts
+++ b/src/auth/identity_auth_logout/index.ts
@@ -2,7 +2,7 @@ import { AzureFunction, HttpRequest } from "@azure/functions";
 import { response } from "../../utils";
 const SWA_EMU_AUTH_URI = process.env.SWA_EMU_AUTH_URI || `http://localhost:4242`;
 
-const httpTrigger: AzureFunction = function (context, req: HttpRequest) {
+const httpTrigger: AzureFunction = function (context, _req: HttpRequest) {
   context.res = response({
     context,
     status: 302,
diff --git a/src/auth/identity_auth_logout_complete/index.ts b/src/auth/identity_auth_logout_complete/index.ts
index 23992df..49357cb 100644
--- a/src/auth/identity_auth_logout_complete/index.ts
+++ b/src/auth/identity_auth_logout_complete/index.ts
@@ -2,7 +2,7 @@ import { AzureFunction, HttpRequest } from "@azure/functions";
 import { response } from "../../utils";
 const SWA_EMU_AUTH_URI = process.env.SWA_EMU_AUTH_URI || `http://localhost:4242`;
 
-const httpTrigger: AzureFunction = function (context, req: HttpRequest) {
+const httpTrigger: AzureFunction = function (context, _req: HttpRequest) {
   const location = `${SWA_EMU_AUTH_URI}/app/.auth/logout/complete`;
 
   context.res = response({
diff --git a/src/auth/identity_redirect_logout/index.ts b/src/auth/identity_redirect_logout/index.ts
index 85c8b07..77d2f6c 100644
--- a/src/auth/identity_redirect_logout/index.ts
+++ b/src/auth/identity_redirect_logout/index.ts
@@ -3,7 +3,7 @@ import { response } from "../../utils";
 const SWA_EMU_AUTH_URI = process.env.SWA_EMU_AUTH_URI || `http://localhost:4242`;
 
 const httpTrigger: AzureFunction = function (context, req: HttpRequest) {
-  const { hostName, post_logout_redirect_uri = "/" } = req.query;
+  const { post_logout_redirect_uri = "/" } = req.query;
 
   const location = `${SWA_EMU_AUTH_URI}/.auth/logout?post_login_redirect_uri=${post_logout_redirect_uri}`;
 
diff --git a/bin/index.ts b/src/cli.ts
similarity index 95%
rename from bin/index.ts
rename to src/cli.ts
index 8efa4ea..cfa5a1f 100755
--- a/bin/index.ts
+++ b/src/cli.ts
@@ -3,11 +3,11 @@
 import shell from "shelljs";
 import path from "path";
 import program from "commander";
-import builder from "../src/builder";
-import { readConfigFile } from "../src/utils";
+import builder from "./builder";
+import { readConfigFile } from "./utils";
 import { spawn } from "child_process";
-import { createRuntimeHost } from "../src/runtimeHost";
-import { dashboard } from "../src/dashboard";
+import { createRuntimeHost } from "./runtimeHost";
+import { dashboard } from "./dashboard";
 
 const EMU_PORT = "80";
 const AUTH_PORT = 4242;
@@ -146,7 +146,7 @@ if (program.ui) {
       cwd: path.resolve(__dirname, ".."),
       env: { ...process.env, ...envVarsObj },
     },
-    (code, stdout, stderr) => {
+    (_code, _stdout, stderr) => {
       if (stderr.length) {
         console.error(stderr);
       }
diff --git a/src/utils.test.ts b/src/utils.test.ts
index 13baa68..f4bed6e 100644
--- a/src/utils.test.ts
+++ b/src/utils.test.ts
@@ -404,7 +404,7 @@ describe("Utils", () => {
 
   describe("readConfigFile()", () => {
     it("config file not found should throw", () => {
-      const mockExit = jest.spyOn(shell, "exit").mockImplementation(((_) => {}) as (code?: number | undefined) => never);
+      jest.spyOn(shell, "exit").mockImplementation(((_) => {}) as (code?: number | undefined) => never);
       expect(() => readConfigFile()).toThrow(/TypeError: GitHub action file content should be a string/);
     });
 
diff --git a/tsconfig.json b/tsconfig.json
index ced2288..f6bbcf3 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,70 +1,33 @@
 {
   "compilerOptions": {
-    /* Visit https://aka.ms/tsconfig.json to read more about this file */
-
-    /* Basic Options */
-    // "incremental": true,                   /* Enable incremental compilation */
-    "target": "es2019",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
-    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
-    // "lib": [],                             /* Specify library files to be included in the compilation. */
-    // "allowJs": true,                       /* Allow javascript files to be compiled. */
-    // "checkJs": true,                       /* Report errors in .js files. */
-    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
-    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
-    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
-    "sourceMap": true,                        /* Generates corresponding '.map' file. */
-    // "outFile": "./",                       /* Concatenate and emit output to single file. */
-    // "outDir": "./",                        /* Redirect output structure to the directory. */
-    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
-    // "composite": true,                     /* Enable project compilation */
-    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
-    // "removeComments": true,                /* Do not emit comments to output. */
-    // "noEmit": true,                        /* Do not emit outputs. */
-    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
-    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
-    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
+    "target": "es2019",
+    "module": "commonjs",
+    "declaration": true,
+    "declarationMap": true,
+    "sourceMap": true,
+    "outDir": "./dist",
+    "rootDir": "./src",
 
     /* Strict Type-Checking Options */
-    "strict": true,                           /* Enable all strict type-checking options. */
-    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
-    // "strictNullChecks": true,              /* Enable strict null checks. */
-    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
-    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
-    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
-    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
-    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */
+    "strict": true,
+    "noImplicitAny": true,
+    "strictNullChecks": true,
+    "strictFunctionTypes": true,
+    "strictBindCallApply": true,
+    "strictPropertyInitialization": true,
+    "noImplicitThis": true,
+    "alwaysStrict": true,
 
     /* Additional Checks */
-    // "noUnusedLocals": true,                /* Report errors on unused locals. */
-    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
-    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
-    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
-
-    /* Module Resolution Options */
-    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
-    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
-    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
-    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
-    // "typeRoots": [],                       /* List of folders to include type definitions from. */
-    // "types": [],                           /* Type declaration files to be included in compilation. */
-    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
-    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
-    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
-    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */
-
-    /* Source Map Options */
-    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
-    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
-    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
-    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
-
-    /* Experimental Options */
-    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
-    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "noImplicitReturns": true,
+    "noFallthroughCasesInSwitch": true,
+    "esModuleInterop": true,
 
     /* Advanced Options */
-    "skipLibCheck": true,                     /* Skip type checking of declaration files. */
-    "forceConsistentCasingInFileNames": true, /* Disallow inconsistently-cased references to the same file. */
+    "skipLibCheck": true,
+    "forceConsistentCasingInFileNames": true,
     "resolveJsonModule": true
   },
   "exclude": ["node_modules"]
-- 
2.29.0
